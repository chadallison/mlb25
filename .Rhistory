# end_with_npr |>
#   transmute(date, team = home_team, npr = home_off_npr + home_def_npr) |>
#   bind_rows(
#     end_with_npr |>
#       transmute(date, team = away_team, npr = away_off_npr + away_def_npr)
#   ) |>
#   arrange(team, date) |>
#   mutate(game_num = row_number(),
#          cum_npr = cumsum(npr),
#          .by = "team") |>
#   inner_join(teams_info, by = "team") |>
#   ggplot(aes(game_num, cum_npr)) +
#   geom_line(aes(col = team), linewidth = 1.25, show.legend = F) +
#   scale_color_manual(values = team_hex)
top_teams = team_records |>
slice_max(win_pct, n = 10, with_ties = F) |>
pull(team)
end_with_npr |>
transmute(date, team = home_team, npr = home_off_npr + home_def_npr) |>
bind_rows(
end_with_npr |>
transmute(date, team = away_team, npr = away_off_npr + away_def_npr)
) |>
arrange(team, date) |>
mutate(game_num = row_number(),
cum_npr = cumsum(npr),
.by = "team") |>
inner_join(teams_info, by = "team") |>
mutate(in_top = team %in% top_teams) |>
ggplot(aes(game_num, cum_npr, group = team)) +
geom_line(aes(col = team, alpha = in_top), linewidth = 1.25, show.legend = F) +
scale_color_manual(values = team_hex) +
scale_alpha_manual(values = c(`TRUE` = 1, `FALSE` = 0.1)) +
ggrepel::geom_text_repel(
data = \(d) d |>
group_by(team) |>
slice_tail(n = 1) |>
filter(team %in% top_teams),
aes(label = abb, col = team),
size = 3.5, nudge_x = 5, hjust = 0, direction = "y", segment.color = NA, show.legend = F) +
coord_cartesian(clip = "off") +
scale_x_continuous(breaks = seq(0, 162, by = 10)) +
scale_y_continuous(breaks = seq(-300, 300, by = 20))
top_teams = team_records |>
slice_max(win_pct, n = 5, with_ties = F) |>
pull(team)
plot_data = end_games |>
transmute(date, team = home_team, margin = home_score - away_score) |>
bind_rows(
end_games |>
transmute(date, team = away_team, margin = away_score - home_score)
) |>
arrange(team, date) |>
mutate(game_num = row_number(),
cum_marg = cumsum(margin),
.by = "team") |>
filter(team %in% top_teams) |>
mutate(team = factor(team, levels = top_teams)) |>
left_join(teams_info |> select(team, abb), by = "team")
# get last point per team for labeling
label_data = plot_data |>
group_by(team) |>
slice_max(game_num, n = 1) |>
ungroup()
ggplot(plot_data, aes(game_num, cum_marg, group = team)) +
geom_line(aes(col = team), linewidth = 2, show.legend = F) +
ggrepel::geom_text_repel(data = label_data, aes(label = abb, col = team),
hjust = 0, nudge_x = 5, direction = "y", show.legend = F) +
scale_color_manual(values = setNames(teams_info$hex[match(top_teams, teams_info$team)], top_teams)) +
labs(x = "Game Number", y = "Cumulative Run Margin",
title = "Season-long run margin, top five teams by win percentage") +
scale_x_continuous(breaks = seq(0, 162, by = 10), expand = expansion(mult = c(0, 0.1))) +
scale_y_continuous(breaks = seq(-100, 300, by = 20))
max_margin = end_games |>
filter(home_score > away_score) |>
mutate(margin = home_score - away_score) |>
slice_min(margin, prop = 0.8, with_ties = F) |>
pull(margin) |>
max()
top_teams = team_records |>
slice_max(win_pct, n = 10, with_ties = F) |>
pull(team)
end_games |>
transmute(date, team = home_team, scored = home_score, allowed = away_score) |>
bind_rows(
end_games |>
transmute(date, team = away_team, scored = away_score, allowed = home_score)
) |>
arrange(team, date) |>
filter(abs(scored - allowed) <= max_margin) |>
mutate(margin = scored - allowed) |>
mutate(game_num = row_number(),
cum_marg = cumsum(margin),
.by = "team") |>
filter(team %in% top_teams) |>
ggplot(aes(game_num, cum_marg)) +
geom_line(aes(col = team), linewidth = 1.25, alpha = 0.2) +
geom_line(aes(col = team), stat = "smooth", formula = y ~ x, method = "loess", linewidth = 1.25) +
labs(x = "Game number", y = "Cumulative run margin",
title = "Cumulative run margins among top teams",
subtitle = "Games with 80th percentile win margin or greater removed")
# opp win pct with games against self removed
fun_name = function(tm) {
home = end_games |> filter(home_team == tm) |> pull(away_team)
away = end_games |> filter(away_team == tm) |> pull(home_team)
opps = sort(unique(c(home, away)))
return(opps)
}
fun_name(tm = "Chicago Cubs")
# opp win pct with games against self removed
fun_name = function(tm) {
home = end_games |> filter(home_team == tm) |> count(opp = away_team, name = "hello")
away = end_games |> filter(away_team == tm) |> count(opp = home_team, name = "hello")
opps = bind_rows(home, away)
return(opps)
}
fun_name(tm = "Chicago Cubs")
# opp win pct with games against self removed
fun_name = function(tm) {
home = end_games |> filter(home_team == tm) |> count(opp = away_team, name = "games")
away = end_games |> filter(away_team == tm) |> count(opp = home_team, name = "games")
opps = bind_rows(home, away) |> group_by(opp) |> summarise(games = sum(games))
return(opps)
}
fun_name(tm = "Chicago Cubs")
# opp win pct with games against self removed
fun_name = function(tm) {
home = end_games |> filter(home_team == tm) |> count(opp = away_team, name = "games")
away = end_games |> filter(away_team == tm) |> count(opp = home_team, name = "games")
opps = bind_rows(home, away) |> group_by(opp) |> summarise(games = sum(games)) |> arrange(desc(games))
return(opps)
}
fun_name(tm = "Chicago Cubs")
fun_name(tm = "Chicago Cubs")
fun_name = function(tm) {
home = end_games |> filter(home_team == tm) |> count(opp = away_team, name = "games")
away = end_games |> filter(away_team == tm) |> count(opp = home_team, name = "games")
opps = bind_rows(home, away) |> group_by(opp) |> summarise(games = sum(games), .groups = "drop")
opp_winpct = end_games |> filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team, away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |> summarise(wins = sum(winner == team), games = n(), win_pct = wins / games, .groups = "drop")
sos = opps |> left_join(opp_winpct, by = c("opp" = "team")) |> summarise(sos = sum(win_pct * games) / sum(games)) |> pull(sos)
return(sos)
}
fun_name(tm = "Chicago Cubs")
fun_name = function(tm) {
home = end_games |> filter(home_team == tm) |> count(opp = away_team, name = "games_played")
away = end_games |> filter(away_team == tm) |> count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |> group_by(opp) |> summarise(games_played = sum(games_played), .groups = "drop")
opp_winpct = end_games |> filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team, away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |> summarise(wins = sum(winner == team), games = n(), win_pct = wins / games, .groups = "drop")
sos = opps |> left_join(opp_winpct, by = c("opp" = "team")) |> summarise(sos = sum(win_pct * games_played) / sum(games_played)) |> pull(sos)
return(sos)
}
fun_name(tm = "Chicago Cubs")
fun_name = function(tm) {
home = end_games |>
filter(home_team == tm) |>
count(opp = away_team, name = "games_played")
away = end_games |>
filter(away_team == tm) |>
count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |>
group_by(opp) |>
summarise(games_played = sum(games_played),
.groups = "drop")
opp_win_pct = end_games |>
filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team,
away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |>
summarise(wins = sum(winner == team),
games = n(),
win_pct = wins / games,
.groups = "drop")
sos = opps |>
left_join(opp_win_pct, by = c("opp" = "team")) |>
summarise(sos = sum(win_pct * games_played) / sum(games_played)) |>
pull(sos) |>
round(3)
return(sos)
}
fun_name(tm = "Chicago Cubs")
fun_name = function(tm) {
home = end_games |>
filter(home_team == tm) |>
count(opp = away_team, name = "games_played")
away = end_games |>
filter(away_team == tm) |>
count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |>
group_by(opp) |>
summarise(games_played = sum(games_played),
.groups = "drop")
opp_win_pct = end_games |>
filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team,
away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |>
summarise(wins = sum(winner == team),
games = n(),
win_pct = wins / games,
.groups = "drop")
sos = opps |>
left_join(opp_win_pct, by = c("opp" = "team")) |>
summarise(sos = sum(win_pct * games_played) / sum(games_played)) |>
pull(sos) |> round(3)
return(sos)
}
fun_name(tm = "Chicago Cubs")
get_team_adj_sos = function(tm) {
home = end_games |>
filter(home_team == tm) |>
count(opp = away_team, name = "games_played")
away = end_games |>
filter(away_team == tm) |>
count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |>
group_by(opp) |>
summarise(games_played = sum(games_played),
.groups = "drop")
opp_win_pct = end_games |>
filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team,
away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |>
summarise(wins = sum(winner == team),
games = n(),
win_pct = wins / games,
.groups = "drop")
sos = opps |>
left_join(opp_win_pct, by = c("opp" = "team")) |>
summarise(sos = sum(win_pct * games_played) / sum(games_played)) |>
pull(sos) |> round(3)
return(sos)
}
get_team_adj_sos(tm = "Chicago Cubs")
get_team_adj_sos = function(tm) {
home = end_games |>
filter(home_team == tm) |>
count(opp = away_team, name = "games_played")
away = end_games |>
filter(away_team == tm) |>
count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |>
group_by(opp) |>
summarise(games_played = sum(games_played),
.groups = "drop")
opp_win_pct = end_games |>
filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team,
away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |>
summarise(wins = sum(winner == team),
games = n(),
win_pct = wins / games,
.groups = "drop")
sos = opps |>
left_join(opp_win_pct, by = c("opp" = "team")) |>
summarise(sos = sum(win_pct * games_played) / sum(games_played)) |>
pull(sos) |> round(3)
return(sos)
}
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos))
get_team_adj_sos = function(tm) {
home = end_games |>
filter(home_team == tm) |>
count(opp = away_team, name = "games_played")
away = end_games |>
filter(away_team == tm) |>
count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |>
group_by(opp) |>
summarise(games_played = sum(games_played),
.groups = "drop")
opp_win_pct = end_games |>
filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team,
away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |>
summarise(wins = sum(winner == team),
games = n(),
win_pct = wins / games,
.groups = "drop")
sos = opps |>
left_join(opp_win_pct, by = c("opp" = "team")) |>
summarise(sos = sum(win_pct * games_played) / sum(games_played)) |>
pull(sos) |> round(3)
return(sos)
}
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
arrange(desc(adj_sos))
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team")
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
inner_join(teams_info, by = "team") |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) |>
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
inner_join(teams_info, by = "team") |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
inner_join(teams_info, by = "team")
team_records
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5) +
geom_hline(yintercept = 0.5)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005))
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.0025))
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.0025), labels = scales::percent)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent)
get_team_adj_sos = function(tm) {
home = end_games |>
filter(home_team == tm) |>
count(opp = away_team, name = "games_played")
away = end_games |>
filter(away_team == tm) |>
count(opp = home_team, name = "games_played")
opps = bind_rows(home, away) |>
group_by(opp) |>
summarise(games_played = sum(games_played),
.groups = "drop")
opp_win_pct = end_games |>
filter(home_team != tm & away_team != tm) |>
mutate(winner = case_when(home_score > away_score ~ home_team,
away_score > home_score ~ away_team)) |>
pivot_longer(cols = c(home_team, away_team), names_to = "loc", values_to = "team") |>
group_by(team) |>
summarise(wins = sum(winner == team),
games = n(),
win_pct = wins / games,
.groups = "drop")
sos = opps |>
inner_join(opp_win_pct, by = c("opp" = "team")) |>
summarise(sos = sum(win_pct * games_played) / sum(games_played)) |>
pull(sos) |> round(3)
return(sos)
}
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent)
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Adjusted Strength of Schedule", y = "Winning Percentage")
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Adjusted Strength of Schedule", y = "Win Percentage",
title = "Win percentage by adjusted opponent strength of schedule")
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Adjusted Strength of Schedule", y = "Win Percentage",
title = "Win percentage by adjusted opponent strength of schedule",
subtitle = "Adj. SOS: games against self removed")
data.frame(team = all_teams) |>
mutate(adj_sos = sapply(team, get_team_adj_sos)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100) |>
ggplot(aes(adj_sos, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.005), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Adjusted Strength of Schedule", y = "Win Percentage",
title = "Win percentage by adjusted opponent strength of schedule")
