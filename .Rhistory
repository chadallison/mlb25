geom_text(aes(label = pl), size = 3, hjust = -0.25) +
geom_text(aes(label = nl), size = 3, hjust = 1.25) +
scale_fill_manual(values = team_hex) +
scale_y_continuous(breaks = seq(-3, 3, by = 0.25)) +
coord_flip(ylim = c(min(team_npr$ovr_npr) * 1.05, max(team_npr$ovr_npr) * 1.05)) +
labs(x = NULL, y = "Overall NPR",
title = glue("Team NPR standings as of {today_nice}"))
team_npr |>
inner_join(teams_info, by = "team") |>
ggplot(aes(off_npr, def_npr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3) +
scale_color_manual(values = team_hex) +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
labs(x = "Offensive NPR", y = "Defensive NPR",
title = glue("Team offensive/defensive NPR as of {today_nice}")) +
scale_x_continuous(breaks = seq(-3, 3, by = 0.25)) +
scale_y_continuous(breaks = seq(-3, 3, by = 0.25))
home_margins = end_games |>
transmute(date, team = home_team, margin = home_score - away_score, home_away = "home")
away_margins = end_games |>
transmute(date, team = away_team, margin = away_score - home_score, home_away = "away")
team_game_margins = bind_rows(home_margins, away_margins) |>
arrange(team, date)
team_game_margins |>
group_by(team) |>
summarise(diff_per_game = sum(margin) / n()) |>
inner_join(teams_info, by = "team") |>
mutate(pl = ifelse(diff_per_game >= 0, round(diff_per_game, 2), ""),
nl = ifelse(diff_per_game < 0, round(diff_per_game, 2), "")) |>
ggplot(aes(reorder(abb, diff_per_game), diff_per_game)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = pl), size = 3, hjust = -0.25) +
geom_text(aes(label = nl), size = 3, hjust = 1.25) +
coord_flip() +
scale_fill_manual(values = team_hex) +
labs(x = NULL, y = "Avg. run differential",
title = glue("Team avg. run differentials as of {today_nice}")) +
scale_y_continuous(breaks = seq(-10, 10, by = 1))
team_pythag = team_scored_allowed |>
group_by(team) |>
summarise(scored = sum(scored),
allowed = sum(allowed)) |>
mutate(pythag = round(scored ^ 1.83 / (scored ^ 1.83 + allowed ^ 1.83) * 100, 1))
team_pythag |>
ggplot(aes(reorder(team, pythag), pythag)) +
geom_col(aes(fill = team), show.legend = F) +
coord_flip(ylim = c(0, max(team_pythag$pythag) * 1.05)) +
scale_fill_manual(values = team_hex) +
geom_text(aes(label = paste0(pythag, "%")), size = 3, hjust = -0.15) +
labs(x = NULL, y = "Pythagorean Win Percentage",
title = glue("Team pythagorean win percentages as of {today_nice}")) +
scale_y_continuous(breaks = seq(0, 100, by = 10), labels = scales::percent_format(scale = 1))
team_records |>
inner_join(team_pythag, by = "team") |>
ggplot(aes(pythag, win_pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
scale_color_manual(values = team_hex) +
geom_vline(xintercept = 50, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 50, linetype = "dashed", alpha = 0.5) +
geom_abline(linetype = "dashed", alpha = 0.25) +
scale_x_continuous(breaks = seq(0, 100, by = 10), labels = scales::percent_format(scale = 1)) +
scale_y_continuous(breaks = seq(0, 100, by = 10), labels = scales::percent_format(scale = 1)) +
labs(x = "Pythagorean Win Percentage (PWP)",
y = "Actual Win Percentage",
title = "Team pythagorean vs. actual win percentage",
subtitle = "Teams above/below diagonal are worse/better than their record per PWP")
team_game_wl = end_games |>
transmute(date, team = win_team, wl = "win") |>
bind_rows(end_games |>
transmute(date, team = lose_team, wl = "loss")) |>
arrange(team, date)
team_wl_streaks = team_game_wl |>
group_by(team) |>
mutate(streak_group = cumsum(wl != lag(wl, default = first(wl))),
streak = sequence(rle(wl)$lengths),
streak_type = ifelse(wl == "win", "W", "L"),
streak_pn = ifelse(streak_type == "W", streak, -streak)) |>
slice_max(date, n = 1, with_ties = F) |>
ungroup() |>
mutate(team_streak = paste0(streak_type, streak))
team_wl_streaks |>
mutate(pl = ifelse(streak_pn >= 0, team_streak, ""),
nl = ifelse(streak_pn < 0, team_streak, "")) |>
ggplot(aes(reorder(team, streak_pn), streak_pn)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = pl), size = 3, hjust = -0.25) +
geom_text(aes(label = nl), size = 3, hjust = 1.25) +
coord_flip() +
scale_fill_manual(values = team_hex) +
scale_y_continuous(breaks = seq(-25, 25, by = 1)) +
labs(x = NULL, y = "Winning/Losing Streak",
title = glue("Team winning/losing streaks as of {today_nice}"))
home_wl = end_games |>
mutate(home_win = ifelse(win_team == home_team, 1, 0),
away_win = ifelse(win_team == away_team, 1, 0)) |>
group_by(team = home_team) |>
summarise(home_wins = sum(home_win),
home_losses = sum(away_win))
away_wl = end_games |>
mutate(home_win = ifelse(win_team == home_team, 1, 0),
away_win = ifelse(win_team == away_team, 1, 0)) |>
group_by(team = away_team) |>
summarise(away_wins = sum(away_win),
away_losses = sum(home_win))
home_wl |>
full_join(away_wl, by = "team") |>
mutate(home_wins = coalesce(home_wins, 0),
home_losses = coalesce(home_losses, 0),
away_wins = coalesce(away_wins, 0),
away_losses = coalesce(away_losses, 0),
home_wp = home_wins / (home_wins + home_losses),
away_wp = away_wins / (away_wins + away_losses),
home_wp = coalesce(home_wp, 0),
away_wp = coalesce(away_wp, 0)) |>
inner_join(teams_info, by = "team") |>
ggplot(aes(home_wp, away_wp)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
labs(x = "Home Win Percentage", y = "Away Win Percentage",
title = glue("Home and away win percentages as of {today_nice}")) +
scale_x_continuous(breaks = seq(0, 1, by = 0.1), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1), labels = scales::percent)
window_size = 10
team_scored_allowed |>
arrange(team, date) |>
mutate(score_roll = rollapply(scored, width = window_size, align = "right", FUN = "sum", fill = NA),
allow_roll = rollapply(allowed, width = window_size, align = "right", FUN = "sum", fill = NA),
.by = "team") |>
filter(!is.na(score_roll) & !is.na(allow_roll)) |>
mutate(py = (score_roll ^ 2) / (score_roll ^ 2 + allow_roll ^ 2)) |>
inner_join(teams_info, by = "team") |>
mutate(window_num = row_number(), .by = "team") |>
ggplot(aes(window_num, py)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(abb), scale = "free_x") +
theme(axis.text = element_blank()) +
labs(x = "Window number", y = "Pythagorean win percentage",
title = "Pythagorean win percentages in ten-game rolling windows")
team_npr_by_game |>
transmute(date, team, npr = off_npr + def_npr) |>
arrange(team, date) |>
mutate(roll_npr = rollapply(npr, width = window_size, align = "right", FUN = "mean", fill = NA), .by = "team") |>
filter(!is.na(roll_npr)) |>
mutate(window_num = row_number(), .by = "team") |>
inner_join(teams_info, by = "team") |>
ggplot(aes(window_num, roll_npr)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(abb), scale = "free_x") +
theme(axis.text = element_blank()) +
labs(x = "Window number", y = "NPR",
title = "Team NPR in ten-game rolling windows")
team_pct_df = team_records |> select(team, win_pct)
above_below_500_res = end_games |>
transmute(team = home_team, opp = away_team, win_flg = ifelse(win_team == home_team, 1, 0)) |>
bind_rows(end_games |>
transmute(team = away_team, opp = home_team, win_flg = ifelse(win_team == away_team, 1, 0))) |>
inner_join(team_pct_df, by = c("opp" = "team")) |>
rename(opp_win_pct = win_pct)
above_below_500_res |>
mutate(ab500 = ifelse(opp_win_pct >= 50, "above", "below")) |>
group_by(team, ab500) |>
summarise(pct = round(mean(win_flg) * 100, 2),
.groups = "drop") |>
pivot_wider(id_cols = team, names_from = "ab500", values_from = "pct") |>
inner_join(teams_info, by = "team") |>
# this might not be the best way to handle but handles an edge case where
# the cubs are yet to play a sub .500 opponent as of 04/26/2025
mutate(above = coalesce(above, below), below = coalesce(below, above)) |>
ggplot(aes(above, below)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_vline(xintercept = 50, linetype = "dashed", alpha = 0.25) +
geom_hline(yintercept = 50, linetype = "dashed", alpha = 0.25) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
labs(x = "Win Percentage vs. Above .500 Teams",
y = "Win Percentage vs. Below .500 Teams",
title = glue("Win percentages vs. above/below .500 teams as of {today_nice}")) +
scale_x_continuous(breaks = seq(0, 100, by = 10), labels = scales::percent_format(scale = 1)) +
scale_y_continuous(breaks = seq(0, 100, by = 10), labels = scales::percent_format(scale = 1))
above_500_cnt_pct = above_below_500_res |>
filter(opp_win_pct >= 50) |>
group_by(team) |>
summarise(cnt = n(),
pct = round(mean(win_flg) * 100)) |>
inner_join(teams_info, by = "team")
above_500_cnt_pct |>
ggplot(aes(cnt, pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_vline(xintercept = mean(above_500_cnt_pct$cnt), linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 50, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 32) +
scale_x_continuous(breaks = seq(0, 100, by = 2)) +
scale_y_continuous(breaks = seq(0, 100, by = 10), labels = scales::percent_format(scale = 1)) +
labs(x = "Games played against .500 or better teams",
y = "Win percentage vs. .500 or better teams",
title = glue("Performance against .500 or better teams as of {today_nice}"))
team_npr_deltas = team_npr_by_game |>
transmute(date, team, npr = off_npr + def_npr) |>
arrange(team, date) |>
mutate(gn = row_number(),
limit = n() - 10,
.by = "team") |>
filter(gn <= limit) |>
group_by(team) |>
summarise(npr_prev_x = round(mean(npr), 3)) |>
inner_join((select(team_npr, team, ovr_npr)), by = "team") |>
mutate(delta = ovr_npr - npr_prev_x,
team_label = paste0(team, " (", round(delta, 2), ")"))
team_npr_deltas |>
inner_join(teams_info, by = "team") |>
ggplot(aes(x = reorder(team_label, ovr_npr), xend = reorder(team_label, ovr_npr),
y = npr_prev_x, yend = ovr_npr, col = team)) +
geom_segment(linewidth = 3.5, show.legend = F) +
geom_text(aes(y = ovr_npr, label = ifelse(delta >= 0, "→", "")),
size = 4, hjust = -0.2, vjust = 0.25, color = "black", alpha = 0.75) +
geom_text(aes(y = ovr_npr, label = ifelse(delta < 0, "←", "")),
size = 4, hjust = 1.2, vjust = 0.25, color = "black", alpha = 0.75) +
coord_flip() +
labs(x = NULL, y = "NPR Before/After Last Ten Games",
title = "Team NPR Trends in Past Ten Games",
subtitle = "Teams ordered by current NPR; number in parentheses represents change in last ten") +
scale_y_continuous(breaks = seq(-5, 5, by = 0.25)) +
scale_color_manual(values = team_hex)
team_runs_scored_by_game = end_games |>
select(date, team = home_team, runs = home_score) |>
rbind(end_games |>
select(date, team = away_team, runs = away_score)) |>
arrange(team, date)
team_runs_avg_sd = team_runs_scored_by_game |>
group_by(team) |>
summarise(avg = mean(runs, trim = 0.1),
sd = sd(runs)) |>
mutate(lb = avg - sd,
ub = avg + sd,
range = ub - lb)
team_runs_avg_sd |>
inner_join(teams_info, by = "team") |>
ggplot(aes(avg, sd)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_line(stat = "smooth", method = "lm", formula = y ~ x, linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(team_runs_avg_sd$avg), linetype = "dashed", alpha = 0.25) +
geom_hline(yintercept = mean(team_runs_avg_sd$sd), linetype = "dashed", alpha = 0.25) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 32) +
scale_color_manual(values = team_hex) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5)) +
scale_y_continuous(breaks = seq(0, 10, by = 0.5)) +
labs(x = "Avg. Runs Scored", y = "Runs Scored Volatility (SD)",
title = "Team runs scored vs. volatility",
subtitle = "Middle 80% of values -- upper & lower 10% (per team) excluded")
team_pythag_small = team_pythag |>
transmute(team, pythag = pythag / 100)
team_sa = team_scored_allowed |>
group_by(team) |>
summarise(scored = sum(scored),
allowed = sum(allowed))
temp = end_games |>
select(home_team, away_team, home_score, away_score) |>
inner_join(team_sa, by = c("home_team" = "team")) |>
rename(home_scored = scored, home_allowed = allowed) |>
inner_join(team_sa, by = c("away_team" = "team")) |>
rename(away_scored = scored, away_allowed = allowed)
team_opp_py = temp |>
group_by(team = home_team) |>
summarise(opp_scored = sum(away_scored),
opp_allowed = sum(away_allowed)) |>
bind_rows(temp |>
group_by(team = away_team) |>
summarise(opp_scored = sum(home_scored),
opp_allowed = sum(home_allowed))) |>
group_by(team) |>
summarise(opp_scored = sum(opp_scored),
opp_allowed = sum(opp_allowed)) |>
mutate(opp_py = opp_scored ^ 2 / (opp_scored ^ 2 + opp_allowed ^ 2)) |>
select(team, opp_py)
team_pythag_small |>
inner_join(team_opp_py, by = "team") |>
inner_join(teams_info, by = "team") |>
ggplot(aes(opp_py, pythag)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
labs(x = "Avg. Opponent Pythagorean Win Percentage",
y = "Pythagorean Win Percentage",
title = glue("Performance by Strength of Schedule as of {today_nice}")) +
scale_x_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent)
one_run_records = end_games |>
filter(win_score - lose_score == 1) |>
count(team = win_team) |>
rename(wins = n) |>
inner_join(end_games |>
filter(win_score - lose_score == 1) |>
count(team = lose_team) |>
rename(losses = n), by = "team") |>
mutate(cnt = wins + losses,
pct = wins / cnt)
one_run_records |>
inner_join(teams_info, by = "team") |>
ggplot(aes(cnt, pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_vline(xintercept = mean(one_run_records$cnt), linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
scale_color_manual(values = team_hex) +
labs(x = "One-Run Games Played",
y = "Win Percentage in One-Run Games",
title = "Performance in One-Run Games") +
scale_x_continuous(breaks = seq(0, 50, by = 1)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent)
team_scored_allowed |>
arrange(team, date) |>
mutate(game_num = row_number(),
gp = max(game_num),
.by = "team") |>
mutate(last7 = ifelse(game_num > gp - 10, 1, 0)) |>
filter(last7 == 1 & abs(scored - allowed) <= 10) |>
group_by(team) |>
summarise(scored = sum(scored),
allowed = sum(allowed)) |>
transmute(team,
py7 = scored ^ 2 / (scored ^ 2 + allowed ^ 2)) |>
inner_join(team_pythag_small, by = "team") |>
inner_join(teams_info, by = "team") |>
ggplot(aes(pythag, py7)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_abline(linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
labs(x = "Overall Pythagorean Win Percentage",
y = "Pythagorean Win Percentage in Last 10 Games",
title = "Pythagorean Win Percentage: Last 10 Games vs. Full Season") +
scale_x_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1), labels = scales::percent)
team_scored_allowed |>
arrange(team, date) |> group_by(team) |> slice_tail(n = 25) |>
filter(abs(scored - allowed) <= 25) |>
summarise(scored = sum(scored), allowed = sum(allowed), .groups = "drop") |>
mutate(py25 = scored^2 / (scored^2 + allowed^2)) |>
inner_join(team_pythag_small, by = "team") |> inner_join(teams_info, by = "team") |>
ggplot(aes(x = pythag, y = py25)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = FALSE) +
geom_vline(xintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
geom_abline(linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
labs(x = "Overall Pythagorean Win Percentage",
y = "Pythagorean Win Percentage (Last 25 Games)",
title = "Pythagorean Wins: Last 25 Games vs. Full Season") +
scale_x_continuous(breaks = seq(0, 1, 0.05), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, 0.05), labels = scales::percent)
end_trimmed = end_games |>
mutate(margin = win_score - lose_score,
margin_pct = percent_rank(margin)) |>
slice_min(margin, prop = 0.95, with_ties = T)
py_trimmed = end_trimmed |>
select(team = home_team, scored = home_score, allowed = away_score) |>
bind_rows(
end_trimmed |>
select(team = away_team, scored = away_score, allowed = home_score)
) |>
group_by(team) |>
summarise(scored = sum(scored),
allowed = sum(allowed)) |>
mutate(py_trimmed = scored ^ 2 / (scored ^ 2 + allowed ^ 2),
lbl = paste0(round(py_trimmed * 100, 1), "%"))
py_trimmed |>
ggplot(aes(reorder(team, py_trimmed), py_trimmed)) +
geom_col(aes(fill = team), show.legend = F) +
coord_flip(ylim = c(0, max(py_trimmed$py_trimmed) * 1.05)) +
scale_fill_manual(values = team_hex) +
geom_text(aes(label = lbl), size = 3, hjust = -0.25) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = NULL, y = "Adj. Pythagorean Win Percentage",
title = "Adjusted pythagorean wins",
subtitle = "All games with a top 5% win margin removed")
py_adj_scat = team_pythag_small |>
inner_join(py_trimmed, by = "team") |>
inner_join(teams_info, by = "team")
help = py_adj_scat |>
mutate(bb = pythag - py_trimmed,
real = paste0(round(pythag * 100, 1), "%")) |>
slice_max(bb, n = 3, with_ties = F) |>
mutate(desc = as.character(glue("{abb}: {real} real vs. {lbl} adj."))) |>
pull(desc) |>
paste0(collapse = "\n")
help = paste0("Most helped by blowouts:\n", help)
hurt = py_adj_scat |>
mutate(bb = pythag - py_trimmed,
real = paste0(round(pythag * 100, 1), "%")) |>
slice_min(bb, n = 3, with_ties = F) |>
mutate(desc = as.character(glue("{abb}: {real} real vs. {lbl} adj."))) |>
pull(desc) |>
paste0(collapse = "\n")
hurt = paste0("Most hurt by blowouts:\n", hurt)
py_adj_scat |>
ggplot(aes(pythag, py_trimmed)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3, max.overlaps = 30) +
geom_vline(xintercept = 0.5, linetype = "dotted", alpha = 0.25) +
geom_hline(yintercept = 0.5, linetype = "dotted", alpha = 0.25) +
geom_abline(linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Actual Pythagorean Win Percentage",
y = "Adjusted Pythagorean Win Percentage",
title = "Raw vs. adjusted pythagorean wins",
subtitle = "Teams below/right of dashed line benefitting from blowout wins") +
annotate(geom = "label", label = help,
x = max(py_adj_scat$pythag) - 0.05,
y = min(py_adj_scat$py_trimmed) + 0.05,
size = 3.5, fontface = "italic", fill = NA,
label.size = 0.5, label.padding = unit(0.4, "lines")) +
annotate(geom = "label", label = hurt,
x = min(py_adj_scat$pythag) + 0.06,
y = max(py_adj_scat$py_trimmed) - 0.05,
size = 3.5, fontface = "italic", fill = NA,
label.size = 0.5, label.padding = unit(0.4, "lines"))
min_dt = min(end_games$date)
max_dt = max(end_games$date)
pitch = bref_daily_pitcher(t1 = min_dt, t2 = max_dt)
pitch |>
filter(!str_detect(Team, ",")) |>
separate(IP, into = c("Full_IP", "Part_IP"), sep = "\\.", remove = F, convert = T) |>
mutate(Bases = BB + HBP + X1B + 2 * X2B + 3 * X3B + 4 * HR,
BPIP = round(Bases / (Full_IP + coalesce(Part_IP, 0) / 3), 3)) |>
slice_max(IP, prop = 0.25) |>
mutate(pred = predict(lm(BPIP ~ WHIP, data = cur_data())),
dist_from_line = abs(BPIP - pred)) |>
mutate(label = if_else(rank(-dist_from_line) <= 10, Name, NA)) |>
ggplot(aes(WHIP, BPIP, label = label)) +
geom_point(col = "springgreen4", alpha = 0.25) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed") +
ggrepel::geom_text_repel(na.rm = T, size = 3.5, max.overlaps = 10) +
scale_x_continuous(breaks = seq(0, 2.5, by = 0.1)) +
scale_y_continuous(breaks = seq(0, 3, by = 0.2)) +
labs(title = "WHIP vs. BPIP",
subtitle = "Players below the dashed line are better than their WHIP suggests")
team_npr |>
mutate(off_rank = rank(off_npr),
def_rank = rank(def_npr)) |>
inner_join(teams_info, by = "team") |>
ggplot(aes(off_rank, def_rank)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = FALSE) +
geom_vline(xintercept = 15, linetype = "dashed", alpha = 0.25) +
geom_hline(yintercept = 15, linetype = "dashed", alpha = 0.25) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5, max.overlaps = 30) +
scale_color_manual(values = team_hex) +
scale_x_continuous(breaks = seq(30, 0, by = -2)) +
scale_y_continuous(breaks = seq(30, 0, by = -2)) +
labs(x = "Offensive NPR Rank", y = "Defensive NPR Rank",
title = "Scatterplot of Team Offensive/Defensive NPR Ranks")
group_size = 7
end_games |>
select(date, team = home_team, scored = home_score, allowed = away_score) |>
bind_rows(
end_games |>
select(date, team = away_team, scored = away_score, allowed = home_score)
) |>
arrange(team, date) |>
mutate(game_num = row_number(), .by = "team") |>
mutate(group7 = ((game_num - 1) %/% group_size) + 1) |>
mutate(group_cnt = n(), .by = c("team", "group7")) |>
filter(group_cnt == group_size) |>
group_by(team, group7) |>
summarise(scored = sum(scored),
allowed = sum(allowed),
.groups = "drop") |>
mutate(py = scored ^ 2 / (scored ^ 2 + allowed ^ 2)) |>
inner_join(teams_info, by = "team") |>
inner_join(team_pythag_small, by = "team") |>
mutate(team2 = as.character(glue("{abb} ({pythag})"))) |>
mutate(team2 = fct_reorder(team2, pythag, .desc = T)) |>
ggplot(aes(group7, py)) +
geom_line(aes(col = team), linewidth = 1.5, show.legend = F) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
facet_wrap(vars(team2)) +
theme(axis.text = element_blank()) +
labs(title = "Pythagorean Wins in Groups of Seven", x = NULL, y = NULL)
rmarkdown::render("workingfile.rmd", output_format = "pdf_document")
setwd("~/r_projects/mlb25")
library(tidyverse)
library(tidymodels)
library(tvthemes)
library(janitor)
library(zoo)
library(glue)
library(nflfastR)
library(patchwork)
library(xgboost)
library(arrow)
# writing then reading removes nflfastR messages
# write_parquet(load_pbp(season = 2024), "data/season_pbp.parquet")
season_pbp = read_parquet("data/season_pbp.parquet", show_col_types = F)
temp = load_pbp(season = 2025)
